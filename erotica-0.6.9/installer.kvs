/*
	 A helper class for installing and parsing files,
	 and generating an uninstallation alias on the fly.

	Example :
	include "utils/installer.kvs"
	%installer = $new(installer,0,myinstaller)
	%installer->$copyFiles(pics,*.png,$file.localdir(pics))
	%installer->$includeFiles(src,*.kvs)
	%installer->generateUninstallAlias("foo::uninstall")
	delete %installer
*/
class(installer,object)
{
	constructor()
	{
	}
	
	copyFiles($0 = source dir,$1 = file regexp,$2 = target dir)
	{
		if($0 == "" || !$file.exists($0))
		{
			echo "[Installer] SCRIPT BUG: The first argument to installer_copyfiles must be a source directory"
			halt
		}
	
		if($1 == "")
		{
			echo "[Installer] SCRIPT BUG: The second argument to installer_copyfiles must be a file name or file regexp"
			halt
		}
	
		if($2 == "")
		{
			echo "[Installer] SCRIPT BUG: The third argument to installer_copyfiles must be a destination directory"
			halt
		}
	
		if($file.exists($0))
		{
			%files = $file.ls($0,f,$1)
			if($length(%files))
			{
				file.mkdir $2
				foreach(%file,%files)
				{
					$this->%lFiles <+ $str.replace($file.fixpath("$2/%file"),"\\\\","\\")
					file.copy -o "$0/%file" "$2/%file"
				}
			}
		}
	}

	includeFiles($0 = dir, $1 = file regexp)
	{
		if($0 == "" || !$file.exists($0))
		{
			echo "[Installer] SCRIPT BUG: The first argument to installer_includefiles must be a source directory"
			halt
		}
	
		if($1 == "")
			%szRe = "*.kvs"
		else
			%szRe = $1

		%files = $file.ls($0,f,$1)
		if($length(%files))
		{
			foreach(%file,%files)
			{
				$this->%lSources <+ "$0/"$str.replace($file.fixpath("$2/%file"),"\\\\","\\")
				include "$0/%file"
			}
		}
	}
		
	
	generateUninstallAlias($0 = alias name)
	{
		%c  = "alias($0)$lf"
		%c .= "{$lf"
		if($isset($this->%lFiles))
		{
			foreach(%file,$this->%lFiles)
			{
				%file =~ s/"^$file.localdir()$file.ps()(.*)$"/"\$file.localdir(\\1)"/
				%c .= "	file.remove \"%file\"$lf";
			}
		}
		if($isset($this->%lSources))
		{
			foreach(%file,$this->%lSources){
				foreach(%line,$file.readlines(%file))
				if(!$str.isempty(%line)){
					if($str.match("event(*)",%line,e))
						%c .= "	event -q ("$str.token(1,"()",%line)"){}$lf"
					else if($str.match("alias(*)",%line,e))
						%aliases<+$str.token(1,"()",%line)
					else if($str.match("defpopup(*)",%line,e))
						%c .= "	defpopup("$str.token(1,"()",%line)"){}$lf"
					else if($str.match("toolbar.create * *",%line,e))
						%c .= "	toolbar.destroy -q "$str.word(1,%line)"$lf"
					else if($str.match("action.create* (*)",%line,e))
						%c .= "	action.destroy -q "$str.replace($str.token(1,"(,)",%line),,\")"$lf"
					else if($str.match("class(*)*",%line,e))
						%c .= "	objects.killclass -q "$str.token(1,"(,)",%line)"$lf"
				}
			}
			if($isset(%aliases))
				foreach(%alias,%aliases)
					%c .= "	alias -q (%alias){}$lf"
			%c .= "	alias -q ($0){}$lf"
		}
		%c .= "}"
		eval %c
	}
}



